
import React, { useState, useEffect } from "react";
import { base44 } from "@/api/base44Client";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ExternalLink, Search, Filter, Star, BookOpen, Video, FileText, Wrench, Target } from "lucide-react";
import { motion } from "framer-motion";

export default function Resources() {
  const [resources, setResources] = useState([]);
  const [filteredResources, setFilteredResources] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [categoryFilter, setCategoryFilter] = useState("All");
  const [difficultyFilter, setDifficultyFilter] = useState("All");

  useEffect(() => {
    loadResources();
  }, []);

  useEffect(() => {
    filterResources();
  }, [resources, searchTerm, categoryFilter, difficultyFilter]);

  const loadResources = async () => {
    try {
      const data = await base44.entities.Resource.list("-rating");
      setResources(data);
    } catch (error) {
      console.error("Error loading resources:", error);
    }
  };

  const filterResources = () => {
    let filtered = resources;

    if (searchTerm) {
      filtered = filtered.filter(resource => 
        resource.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        resource.description?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (categoryFilter !== "All") {
      filtered = filtered.filter(resource => resource.category === categoryFilter);
    }

    if (difficultyFilter !== "All") {
      filtered = filtered.filter(resource => resource.difficulty_level === difficultyFilter);
    }

    setFilteredResources(filtered);
  };

  const getCategoryIcon = (category) => {
    const icons = {
      'Tool': Wrench,
      'Documentation': FileText,
      'Tutorial': BookOpen,
      'Book': BookOpen,
      'Video': Video,
      'Practice': Target
    };
    return icons[category] || FileText;
  };

  const getCategoryColor = (category) => {
    const colors = {
      'Tool': 'bg-blue-100 text-blue-800 border-blue-200',
      'Documentation': 'bg-emerald-100 text-emerald-800 border-emerald-200',
      'Tutorial': 'bg-purple-100 text-purple-800 border-purple-200',
      'Book': 'bg-amber-100 text-amber-800 border-amber-200',
      'Video': 'bg-red-100 text-red-800 border-red-200',
      'Practice': 'bg-cyan-100 text-cyan-800 border-cyan-200'
    };
    return colors[category] || 'bg-gray-100 text-gray-800 border-gray-200';
  };

  const getDifficultyColor = (difficulty) => {
    const colors = {
      'Beginner': 'bg-emerald-100 text-emerald-800',
      'Intermediate': 'bg-amber-100 text-amber-800',
      'Advanced': 'bg-red-100 text-red-800'
    };
    return colors[difficulty] || colors['Beginner'];
  };

  const renderStars = (rating) => {
    return Array(5).fill(0).map((_, i) => (
      <Star
        key={i}
        className={`w-4 h-4 ${i < rating ? 'text-amber-400 fill-current' : 'text-gray-300'}`}
      />
    ));
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-emerald-50 p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-12"
        >
          <h1 className="text-3xl md:text-4xl font-bold text-slate-900 mb-4">Learning Resources</h1>
          <p className="text-slate-600 text-lg max-w-2xl mx-auto">
            Curated tools, documentation, tutorials, and materials to accelerate your software development journey
          </p>
        </motion.div>

        {/* Filters */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="mb-8"
        >
          <Card className="bg-white/80 backdrop-blur-xl border-white/40 shadow-xl">
            <CardContent className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4" />
                  <Input
                    placeholder="Search resources..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10"
                  />
                </div>
                
                <Select value={categoryFilter} onValueChange={setCategoryFilter}>
                  <SelectTrigger>
                    <SelectValue placeholder="Filter by category" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="All">All Categories</SelectItem>
                    <SelectItem value="Tool">Tools</SelectItem>
                    <SelectItem value="Documentation">Documentation</SelectItem>
                    <SelectItem value="Tutorial">Tutorials</SelectItem>
                    <SelectItem value="Book">Books</SelectItem>
                    <SelectItem value="Video">Videos</SelectItem>
                    <SelectItem value="Practice">Practice</SelectItem>
                  </SelectContent>
                </Select>

                <Select value={difficultyFilter} onValueChange={setDifficultyFilter}>
                  <SelectTrigger>
                    <SelectValue placeholder="Filter by difficulty" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="All">All Levels</SelectItem>
                    <SelectItem value="Beginner">Beginner</SelectItem>
                    <SelectItem value="Intermediate">Intermediate</SelectItem>
                    <SelectItem value="Advanced">Advanced</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Resources Grid */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
        >
          {filteredResources.map((resource, index) => {
            const CategoryIcon = getCategoryIcon(resource.category);
            
            return (
              <motion.div
                key={resource.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.05 }}
              >
                <Card className="group h-full bg-white/80 backdrop-blur-xl border-white/40 shadow-xl hover:shadow-2xl transition-all duration-500 hover:-translate-y-1">
                  <CardHeader className="pb-4">
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex items-center gap-3">
                        <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-emerald-500 rounded-xl flex items-center justify-center text-white shadow-lg">
                          <CategoryIcon className="w-5 h-5" />
                        </div>
                        <div className="flex flex-col gap-2">
                          <Badge className={`${getCategoryColor(resource.category)} border w-fit`}>
                            {resource.category}
                          </Badge>
                          {resource.difficulty_level && (
                            <Badge variant="outline" className={getDifficultyColor(resource.difficulty_level)}>
                              {resource.difficulty_level}
                            </Badge>
                          )}
                        </div>
                      </div>
                      
                      <Button
                        variant="ghost"
                        size="icon"
                        asChild
                        className="opacity-0 group-hover:opacity-100 transition-opacity hover:bg-blue-50"
                      >
                        <a href={resource.url} target="_blank" rel="noopener noreferrer">
                          <ExternalLink className="w-4 h-4" />
                        </a>
                      </Button>
                    </div>

                    <CardTitle className="text-lg group-hover:text-blue-700 transition-colors leading-tight">
                      {resource.title}
                    </CardTitle>
                    
                    {resource.rating && (
                      <div className="flex items-center gap-2 mt-2">
                        <div className="flex gap-1">
                          {renderStars(resource.rating)}
                        </div>
                        <span className="text-sm text-slate-600 font-medium">
                          {resource.rating}/5
                        </span>
                      </div>
                    )}
                  </CardHeader>

                  <CardContent className="pt-0 flex-1 flex flex-col justify-between">
                    <div>
                      <p className="text-slate-600 text-sm leading-relaxed mb-4">
                        {resource.description}
                      </p>
                    </div>

                    <div className="mt-auto">
                      <Button
                        asChild
                        className="w-full bg-gradient-to-r from-blue-600 to-emerald-600 hover:from-blue-700 hover:to-emerald-700 text-white shadow-lg group-hover:shadow-xl transition-all"
                      >
                        <a href={resource.url} target="_blank" rel="noopener noreferrer">
                          <ExternalLink className="w-4 h-4 mr-2" />
                          Access Resource
                        </a>
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            );
          })}
        </motion.div>

        {filteredResources.length === 0 && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="text-center py-16"
          >
            <div className="w-20 h-20 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Search className="w-8 h-8 text-slate-400" />
            </div>
            <h3 className="text-xl font-semibold text-slate-900 mb-2">No resources found</h3>
            <p className="text-slate-600">Try adjusting your search criteria or filters</p>
          </motion.div>
        )}
      </div>
    </div>
  );
}
